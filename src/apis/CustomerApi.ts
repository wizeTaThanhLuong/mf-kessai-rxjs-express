// tslint:disable
/**
 * MF KESSAI API v2
 * MF KESSAI REST API
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api.support@mfkessai.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import {
    CreateCustomerResponse,
    Customer,
    CustomerPayload,
    CustomerUpdatePayload,
    CustomersList,
} from '../models';

export interface CreateCustomerRequest {
    payload: CustomerPayload;
}

export interface GetCustomerRequest {
    customerId: string;
}

export interface GetCustomersListRequest {
    number?: string;
    paymentMethod?: Array<GetCustomersListPaymentMethodEnum>;
    hasAlert?: boolean;
    createdAtFrom?: Date;
    createdAtTo?: Date;
    after?: string;
    before?: string;
    limit?: number;
}

export interface UpdateCustomerRequest {
    customerId: string;
    payload: CustomerUpdatePayload;
}

/**
 * no description
 */
export class CustomerApi extends BaseAPI {

    /**
     * 顧客登録
     * 顧客を登録することができます。顧客には必ず一つの請求先が必要であるため同時に請求先一件も登録します。
     */
    createCustomer = ({ payload }: CreateCustomerRequest): Observable<CreateCustomerResponse> => {
        throwIfNullOrUndefined(payload, 'createCustomer');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<CreateCustomerResponse>({
            path: '/customers',
            method: 'POST',
            headers,
            body: payload,
        });
    };

    /**
     * 顧客取得
     * 顧客IDを指定して対象顧客１件を取得することができます。
     */
    getCustomer = ({ customerId }: GetCustomerRequest): Observable<Customer> => {
        throwIfNullOrUndefined(customerId, 'getCustomer');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Customer>({
            path: '/customers/{customer_id}'.replace('{customer_id}', encodeURI(customerId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * 顧客一覧取得
     * 顧客の一覧を取得することができます。顧客番号や支払方法、未入金の有無で絞り込んで取得することもできます。
     */
    getCustomersList = ({ number, paymentMethod, hasAlert, createdAtFrom, createdAtTo, after, before, limit }: GetCustomersListRequest): Observable<CustomersList> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        const query: HttpQuery = {};

        if (number != null) { query['number'] = number; }
        if (paymentMethod != null) { query['payment_method'] = paymentMethod.join(COLLECTION_FORMATS['csv']); }
        if (hasAlert != null) { query['has_alert'] = hasAlert; }
        if (createdAtFrom != null) { query['created_at_from'] = (createdAtFrom as any).toISOString(); }
        if (createdAtTo != null) { query['created_at_to'] = (createdAtTo as any).toISOString(); }
        if (after != null) { query['after'] = after; }
        if (before != null) { query['before'] = before; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<CustomersList>({
            path: '/customers',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * 顧客更新
     * 顧客の情報を更新することができます。
     */
    updateCustomer = ({ customerId, payload }: UpdateCustomerRequest): Observable<Customer> => {
        throwIfNullOrUndefined(customerId, 'updateCustomer');
        throwIfNullOrUndefined(payload, 'updateCustomer');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Customer>({
            path: '/customers/{customer_id}'.replace('{customer_id}', encodeURI(customerId)),
            method: 'PATCH',
            headers,
            body: payload,
        });
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetCustomersListPaymentMethodEnum {
    BankTransfer = 'bank_transfer',
    AccountTransfer = 'account_transfer'
}
