// tslint:disable
/**
 * MF KESSAI API v2
 * MF KESSAI REST API
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api.support@mfkessai.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    Destination,
    DestinationPayload,
    DestinationsList,
} from '../models';

export interface CreateDestinationRequest {
    payload: DestinationPayload;
}

export interface GetDestinationRequest {
    destinationId: string;
}

export interface GetDestinationsListRequest {
    customerId?: string;
    customerNumber?: string;
    createdAtFrom?: Date;
    createdAtTo?: Date;
    after?: string;
    before?: string;
    limit?: number;
}

/**
 * no description
 */
export class DestinationApi extends BaseAPI {

    /**
     * 請求先登録
     * 顧客を指定して請求先を登録することができます。 <aside class=\"info\">請求先は更新ができません。更新したい場合は新規登録をしてご利用ください。</aside>
     */
    createDestination = ({ payload }: CreateDestinationRequest): Observable<Destination> => {
        throwIfNullOrUndefined(payload, 'createDestination');

        const headers: HttpHeaders = {
            'Content-Type': 'application/json',
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Destination>({
            path: '/destinations',
            method: 'POST',
            headers,
            body: payload,
        });
    };

    /**
     * 請求先取得
     * 請求先IDを指定して対象請求先１件を取得することができます。
     */
    getDestination = ({ destinationId }: GetDestinationRequest): Observable<Destination> => {
        throwIfNullOrUndefined(destinationId, 'getDestination');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Destination>({
            path: '/destinations/{destination_id}'.replace('{destination_id}', encodeURI(destinationId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * 請求先一覧取得
     * 請求先の一覧を取得します。顧客IDや顧客番号で特定の顧客に紐づく請求先に絞り込んで取得することもできます。
     */
    getDestinationsList = ({ customerId, customerNumber, createdAtFrom, createdAtTo, after, before, limit }: GetDestinationsListRequest): Observable<DestinationsList> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        const query: HttpQuery = {};

        if (customerId != null) { query['customer_id'] = customerId; }
        if (customerNumber != null) { query['customer_number'] = customerNumber; }
        if (createdAtFrom != null) { query['created_at_from'] = (createdAtFrom as any).toISOString(); }
        if (createdAtTo != null) { query['created_at_to'] = (createdAtTo as any).toISOString(); }
        if (after != null) { query['after'] = after; }
        if (before != null) { query['before'] = before; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<DestinationsList>({
            path: '/destinations',
            method: 'GET',
            headers,
            query,
        });
    };

}
