// tslint:disable
/**
 * MF KESSAI API v2
 * MF KESSAI REST API
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api.support@mfkessai.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import {
    Billing,
    BillingsList,
} from '../models';

export interface GetBillingRequest {
    billingId: string;
}

export interface GetBillingsListRequest {
    customerId?: string;
    status?: Array<GetBillingsListStatusEnum>;
    dueDateFrom?: Date;
    dueDateTo?: Date;
    issueDateFrom?: Date;
    issueDateTo?: Date;
    unpaid?: boolean;
    after?: string;
    before?: string;
    limit?: number;
}

/**
 * no description
 */
export class BillingApi extends BaseAPI {

    /**
     * 請求取得
     */
    getBilling = ({ billingId }: GetBillingRequest): Observable<Billing> => {
        throwIfNullOrUndefined(billingId, 'getBilling');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Billing>({
            path: '/billings/{billing_id}'.replace('{billing_id}', encodeURI(billingId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * 請求一覧取得
     */
    getBillingsList = ({ customerId, status, dueDateFrom, dueDateTo, issueDateFrom, issueDateTo, unpaid, after, before, limit }: GetBillingsListRequest): Observable<BillingsList> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        const query: HttpQuery = {};

        if (customerId != null) { query['customer_id'] = customerId; }
        if (status != null) { query['status'] = status.join(COLLECTION_FORMATS['csv']); }
        if (dueDateFrom != null) { query['due_date_from'] = (dueDateFrom as any).toISOString(); }
        if (dueDateTo != null) { query['due_date_to'] = (dueDateTo as any).toISOString(); }
        if (issueDateFrom != null) { query['issue_date_from'] = (issueDateFrom as any).toISOString(); }
        if (issueDateTo != null) { query['issue_date_to'] = (issueDateTo as any).toISOString(); }
        if (unpaid != null) { query['unpaid'] = unpaid; }
        if (after != null) { query['after'] = after; }
        if (before != null) { query['before'] = before; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<BillingsList>({
            path: '/billings',
            method: 'GET',
            headers,
            query,
        });
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetBillingsListStatusEnum {
    Scheduled = 'scheduled',
    InvoiceIssued = 'invoice_issued',
    AccountTransferNotified = 'account_transfer_notified'
}
