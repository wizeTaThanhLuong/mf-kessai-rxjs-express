// tslint:disable
/**
 * MF KESSAI API v2
 * MF KESSAI REST API
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api.support@mfkessai.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI } from '../runtime';
import {
    CreditFacilitiesList,
    CreditFacility,
} from '../models';

export interface GetCreditFacilitiesListRequest {
    customerId?: string;
    customerNumber?: string;
    customerExaminationId?: string;
    startDateFrom?: Date;
    startDateTo?: Date;
    endDateFrom?: Date;
    endDateTo?: Date;
    after?: string;
    before?: string;
    limit?: number;
}

export interface GetCreditFacilityRequest {
    creditFacilityId: string;
}

/**
 * no description
 */
export class CreditFacilityApi extends BaseAPI {

    /**
     * 与信枠一覧取得
     * 与信枠の一覧を取得します。顧客IDや取引登録期間開始日・終了日で絞り込んで取得することもできます。
     */
    getCreditFacilitiesList = ({ customerId, customerNumber, customerExaminationId, startDateFrom, startDateTo, endDateFrom, endDateTo, after, before, limit }: GetCreditFacilitiesListRequest): Observable<CreditFacilitiesList> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        const query: HttpQuery = {};

        if (customerId != null) { query['customer_id'] = customerId; }
        if (customerNumber != null) { query['customer_number'] = customerNumber; }
        if (customerExaminationId != null) { query['customer_examination_id'] = customerExaminationId; }
        if (startDateFrom != null) { query['start_date_from'] = (startDateFrom as any).toISOString(); }
        if (startDateTo != null) { query['start_date_to'] = (startDateTo as any).toISOString(); }
        if (endDateFrom != null) { query['end_date_from'] = (endDateFrom as any).toISOString(); }
        if (endDateTo != null) { query['end_date_to'] = (endDateTo as any).toISOString(); }
        if (after != null) { query['after'] = after; }
        if (before != null) { query['before'] = before; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<CreditFacilitiesList>({
            path: '/credit_facilities',
            method: 'GET',
            headers,
            query,
        });
    };

    /**
     * 与信枠取得
     * 与信枠IDを指定して対象与信枠１件を取得することができます。
     */
    getCreditFacility = ({ creditFacilityId }: GetCreditFacilityRequest): Observable<CreditFacility> => {
        throwIfNullOrUndefined(creditFacilityId, 'getCreditFacility');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<CreditFacility>({
            path: '/credit_facilities/{credit_facility_id}'.replace('{credit_facility_id}', encodeURI(creditFacilityId)),
            method: 'GET',
            headers,
        });
    };

}
