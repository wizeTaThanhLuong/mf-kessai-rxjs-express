// tslint:disable
/**
 * MF KESSAI API v2
 * MF KESSAI REST API
 *
 * The version of the OpenAPI document: 2.3.1
 * Contact: api.support@mfkessai.co.jp
 *
 * NOTE: This class is auto generated by OpenAPI Generator (https://openapi-generator.tech).
 * https://openapi-generator.tech
 * Do not edit the class manually.
 */

import { Observable } from 'rxjs';
import { BaseAPI, HttpHeaders, HttpQuery, throwIfNullOrUndefined, encodeURI, COLLECTION_FORMATS } from '../runtime';
import {
    Payout,
    PayoutsList,
} from '../models';

export interface GetPayoutRequest {
    payoutId: string;
}

export interface GetPayoutsListRequest {
    status?: Array<GetPayoutsListStatusEnum>;
    payoutDateFrom?: Date;
    payoutDateTo?: Date;
    after?: string;
    before?: string;
    limit?: number;
}

/**
 * no description
 */
export class PayoutApi extends BaseAPI {

    /**
     * 振込取得
     */
    getPayout = ({ payoutId }: GetPayoutRequest): Observable<Payout> => {
        throwIfNullOrUndefined(payoutId, 'getPayout');

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        return this.request<Payout>({
            path: '/payouts/{payout_id}'.replace('{payout_id}', encodeURI(payoutId)),
            method: 'GET',
            headers,
        });
    };

    /**
     * 振込一覧取得
     */
    getPayoutsList = ({ status, payoutDateFrom, payoutDateTo, after, before, limit }: GetPayoutsListRequest): Observable<PayoutsList> => {

        const headers: HttpHeaders = {
            ...(this.configuration.apiKey && { 'apikey': this.configuration.apiKey('apikey') }), // apikey authentication
        };

        const query: HttpQuery = {};

        if (status != null) { query['status'] = status.join(COLLECTION_FORMATS['csv']); }
        if (payoutDateFrom != null) { query['payout_date_from'] = (payoutDateFrom as any).toISOString(); }
        if (payoutDateTo != null) { query['payout_date_to'] = (payoutDateTo as any).toISOString(); }
        if (after != null) { query['after'] = after; }
        if (before != null) { query['before'] = before; }
        if (limit != null) { query['limit'] = limit; }

        return this.request<PayoutsList>({
            path: '/payouts',
            method: 'GET',
            headers,
            query,
        });
    };

}

/**
 * @export
 * @enum {string}
 */
export enum GetPayoutsListStatusEnum {
    InProgress = 'in_progress',
    Completed = 'completed'
}
